{"ast":null,"code":"import { put, takeLatest, all } from 'redux-saga/effects';\nimport { findPaths } from './../lib/flightManager';\nimport { transformFlightDates } from './../lib/utils';\nfunction* fetchFlights() {\n  // try {\n\n  // //https://my-json-server.typicode.com/mneema/mock-db/flights \n  //   const json = yield fetch('http://localhost:3000/airlines')\n  //     .then(response => response.json());\n  //     return json;\n  //  // yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: transformFlightDates(json) });\n  // } catch (e) {\n  //   console.log('error', e);\n  //   yield put({ type: \"GET_FLIGHTS_FAIL\", error: e });\n  // }\n}\nfunction* findFlights(payload) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload.payload.criteria)\n  };\n  console.log(requestOptions + \"requestOptions\");\n  try {\n    yield put({\n      type: \"GET_FILTERS_SUCCESS\",\n      json: payload.payload.criteria\n    });\n    const _payload$payload = payload.payload,\n      flights = _payload$payload.flights,\n      _payload$payload$crit = _payload$payload.criteria,\n      returnDate = _payload$payload$crit.returnDate,\n      origin = _payload$payload$crit.origin,\n      destination = _payload$payload$crit.destination,\n      departureDate = _payload$payload$crit.departureDate,\n      numOfPassengers = _payload$payload$crit.numOfPassengers,\n      cabinclass = _payload$payload$crit.cabinclass;\n    const listOfFlights = {};\n    const json1 = yield fetch('http://localhost:3000/airlines/test', requestOptions).then(response => response.json());\n    console.log(JSON.stringify(json1));\n\n    /*const json = yield fetch('http://localhost:3000/airlines')\n      .then(response => response.json());*/\n    yield put({\n      type: \"GET_FLIGHTS_SUCCESS\",\n      json: json1\n    });\n    yield put({\n      type: \"GET_FLIGHTS_SUCCESS\",\n      json: transformFlightDates(json1)\n    });\n    if (returnDate) {\n      listOfFlights.return = findPaths({\n        flights,\n        criteria: {\n          origin: destination,\n          destination: origin,\n          date: returnDate,\n          numOfPassengers\n        }\n      });\n    }\n\n    // listOfFlights.onwards = findPaths({ flights, criteria: { origin, destination, date: departureDate, numOfPassengers } });\n\n    yield put({\n      type: \"GET_ROUTES_SUCCESS\",\n      json: json1\n    });\n    return json1;\n  } catch (e) {\n    console.log('error', e);\n    yield put({\n      type: \"GET_ROUTES_FAIL\",\n      error: e\n    });\n  }\n}\nfunction* flightsWatcher() {\n  yield takeLatest('GET_FLIGHTS', fetchFlights);\n}\nfunction* findFlightsWatcher() {\n  yield takeLatest('GET_ROUTES', findFlights);\n}\nexport default function* rootSaga() {\n  yield all([flightsWatcher(), findFlightsWatcher()]);\n}","map":{"version":3,"names":["put","takeLatest","all","findPaths","transformFlightDates","fetchFlights","findFlights","payload","requestOptions","method","headers","body","JSON","stringify","criteria","console","log","type","json","_payload$payload","flights","_payload$payload$crit","returnDate","origin","destination","departureDate","numOfPassengers","cabinclass","listOfFlights","json1","fetch","then","response","return","date","e","error","flightsWatcher","findFlightsWatcher","rootSaga"],"sources":["/home/user/Documents/frontend-preyana/src/sagas/index.js"],"sourcesContent":["import { put, takeLatest, all } from 'redux-saga/effects';\nimport { findPaths } from './../lib/flightManager';\nimport { transformFlightDates } from './../lib/utils';\n\nfunction* fetchFlights() {\n  // try {\n    \n  // //https://my-json-server.typicode.com/mneema/mock-db/flights \n  //   const json = yield fetch('http://localhost:3000/airlines')\n  //     .then(response => response.json());\n  //     return json;\n  //  // yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: transformFlightDates(json) });\n  // } catch (e) {\n  //   console.log('error', e);\n  //   yield put({ type: \"GET_FLIGHTS_FAIL\", error: e });\n  // }\n\n}\n\nfunction* findFlights(payload) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload.payload.criteria)\n};\nconsole.log(requestOptions+\"requestOptions\");\n  try {\n    yield put({ type: \"GET_FILTERS_SUCCESS\", json: payload.payload.criteria });\n    \n    const { flights, criteria: { returnDate, origin, destination, departureDate, numOfPassengers, cabinclass } } = payload.payload;\n    const listOfFlights = {};\n    const json1 = yield fetch('http://localhost:3000/airlines/test',requestOptions)\n      .then(response => response.json());\n      console.log(JSON.stringify(json1));\n     \n    /*const json = yield fetch('http://localhost:3000/airlines')\n      .then(response => response.json());*/\n      yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: json1});\n    yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: transformFlightDates(json1) });\n    \n    if (returnDate) {\n      listOfFlights.return = findPaths({ flights, criteria: { origin: destination, destination: origin, date: returnDate, numOfPassengers } })\n    }\n\n   // listOfFlights.onwards = findPaths({ flights, criteria: { origin, destination, date: departureDate, numOfPassengers } });\n    \n    yield put({ type: \"GET_ROUTES_SUCCESS\", json: json1 });\n    return json1\n  } catch (e) {\n    console.log('error', e);\n    yield put({ type: \"GET_ROUTES_FAIL\", error: e });\n  }\n\n}\n\nfunction* flightsWatcher() {\n  yield takeLatest('GET_FLIGHTS', fetchFlights)\n}\n\nfunction* findFlightsWatcher() {\n  yield takeLatest('GET_ROUTES', findFlights)\n}\n\nexport default function* rootSaga() {\n  yield all([\n    flightsWatcher(),\n    findFlightsWatcher()\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}